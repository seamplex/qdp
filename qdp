#!/bin/bash
# quick & dirty plot
# uses pyxplot to create a quick & dirty xy plot from a single-file

# defcolors=(blue olivegreen brickred grey sepia tan black magenta periwinkle orange)
xcol=1
ycol=()
key="above"
width=12
dpi=127

pdf=-1
png=-1

# defaults
defaultcolor=(blue black green brickred gray turquoise magenta pinegreen sepia burntorange)   
defaultpt=(1 15 2 3 4 5 6 7 8 9)

usage() {
 cat << EOF 1>&2
usage: $0 [options] [-o output] [datafile]
 no datafile indicates stdin
 if no output is given, basename is assumed equal to datafile
 if neither output nor datafile given, basename output is qdp
 either .png and .pdf will be appended to output
     --ycol "<ints>"         set y columns in datafile, default all
     --xcol <int>            set x column in datafile, default ${xcol}
     --xlabel <string>       set x axis label, default none
     --ylabel <string>       set y axis label, default none
     --xrange <range>        set x axis range, default auto
     --yrange <range>        set y axis range, default auto
     --grid                  set grid, default no
     --width <float>         set plot width in cm, default ${width}
     --with "<strings>"      set plotting styles, default linespoints
     --lt "<strings>"        set linetypes, default 1
     --lw "<floats>"         set linewdiths, default 1
     --plw "<floats>"        set pointlinewidths, default 1
     --ps "<float>"          set pointsizes, default 1
     --pt "<ints>"           set pointtype, default some values
     --pi "<ints>"           set pointinterval (extension to pyxplot)
     --color "<strings>"     set colors, default blue, black, green, etc.
     --ti "<strings>"        set column titles, default none
     --plottitle <string>    set plot title, default none
     --key <string>          set key location, default above
     --pre <string>          execute pyxplot commands in  <string> before plotting
     --pdf                   generate only pdf output, default both
     --png                   generate only png output, default both
     --dpi <float>           dpi to use in png output, default ${dpi}
     --header <file>         use <file> as template instead of default
     --debug                 leave the .ppl file for inspection and edition

 quotes are needed if several columns are to be plotted
 see the examples subdirectory
EOF
  exit 1
}

ARGS=`getopt -o ":o:h" -l "\
plottitle:,\
ti:,\
xcol:,\
ycol:,\
xlabel:,\
ylabel:,\
xrange:,\
yrange:,\
grid,\
width:,\
with:,\
lt:,\
lw:,\
plw:,\
ps:,\
pt:,\
pi:,\
color:,\
pre:,\
header:,\
key:,\
pdf,\
png,\
dpi:,\
debug,\
help" -n "$0" -- "$@"`

# echo $ARGS
if [ $? -ne 0 ];
then
  exit 1
fi
eval set -- "$ARGS"
 
# Now go through all the options
while true;
do
  case "$1" in
    -h|--help)
      usage
      exit 1;;

    --plottitle)
      if [ -n "$2" ];
      then
        plottitle="$2"
      fi
      shift 2;;

    --ti)
      if [ -n "$2" ];
      then
        ti=($2)
      fi
      shift 2;;

    -o)
      if [ -n "$2" ];
      then
        output="$2"
      fi
      shift 2;;

    --xcol)
      if [ -n "$2" ];
      then
        xcol="$2"
      fi
      shift 2;;

    --ycol)
      if [ -n "$2" ];
      then
        ycol=($2)
      fi
      shift 2;;

    --xlabel)
      if [ -n "$2" ];
      then
        xlabel="$2"
      fi
      shift 2;;

    --ylabel)
      if [ -n "$2" ];
      then
        ylabel="$2"
      fi
      shift 2;;

    --xrange)
      if [ -n "$2" ];
      then
        xrange="$2"
      fi
      shift 2;;

    --yrange)
      if [ -n "$2" ];
      then
        yrange="$2"
      fi
      shift 2;;

    --width)
      if [ -n "$2" ];
      then
        width=$2
      fi
      shift 2;;

    --with)
      if [ -n "$2" ];
      then
        with=($2)
      fi
      shift 2;;

    --grid)
      grid=1
      shift 1;;

    --lt)
      if [ -n "$2" ];
      then
        lt=($2)
      fi
      shift 2;;

    --lw)
      if [ -n "$2" ];
      then
        lw=($2)
      fi
      shift 2;;

    --plw)
      if [ -n "$2" ];
      then
        plw=($2)
      fi
      shift 2;;

    --ps)
      if [ -n "$2" ];
      then
        ps=($2)
      fi
      shift 2;;

    --pt)
      if [ -n "$2" ];
      then
        pt=($2)
      fi
      shift 2;;

    --pi)
      if [ -n "$2" ];
      then
        pi=($2)
      fi
      shift 2;;

    --color)
      if [ -n "$2" ];
      then
        color=($2)
      fi
      shift 2;;

    --pre)
      if [ -n "$2" ];
      then
        pre="$2"
      fi
      shift 2;;

    --header)
      if [ -n "$2" ];
      then
        header="$2"
      fi
      shift 2;;
 
    --key)
      if [ -n "$2" ];
      then
        key="$2"
      fi
      shift 2;;

    --pdf)
      pdf=1
      png=0
      shift 1;;

    --png)
      png=1
      pdf=0
      shift 1;;

    --dpi)
      if [ -n "$2" ];
      then
        dpi="$2"
      fi
      shift 2;;

    --debug)
      debug=1
      shift 1;;

    --)
      shift
      break;;
  esac
done

shift $((OPTIND-1))

if [ -z "$1" ]; then
   data=`mktemp`
   cat > $data
else
  data="$1"
fi

if [ ! -f "$data" ]; then
 echo "error: cannot open ${data}"
 exit 1;
fi

if [ -z "$output" ]; then
  if [ -z "$1" ]; then
    output="qdp"
  else
    output="$1"
  fi
fi

if [ ! -z "$debug" ]; then
  pplfile="${output}.ppl"
  if [ -e ${pplfile} ]; then
    echo "error: the debug option was given and ${pplfile} already exists"
    exit 1
  fi
else
  pplfile=`mktemp`
fi

cat << EOF > ${pplfile}
# automatically generated by qdp on `date`
#
EOF

if [ ! -z "${header}" ]; then
  if [ ! -e "${header}" ]; then
    echo "header file ${header} does not exist"
    exit 1
  fi
  cat ${header} >> ${pplfile}
else
  # default header
  cat << EOF >> ${pplfile}
set preamble "\\usepackage{amsmath}"
set width ${width}*unit(cm)
set axis x arrow nomirrored
set axis y arrow nomirrored
#set nomxtics

set style data linespoints
EOF
fi

if [ ! -z "${pre}" ]; then
  echo ${pre} >> ${pplfile}
fi

echo >> ${pplfile}

# read information from the data file itself
for field in title xlabel ylabel xrange yrange key; do
 if [ -z "`eval echo \\$${field}`" ]; then
   eval ${field}=\"`grep "# ${field}" ${data} | cut -d " " -f3-`\"
 fi
done

# quoted fields
for field in title xlabel ylabel; do
 #  if not empty, write it into the ppl file
 if [ ! -z "`eval echo \\$${field}`" ]; then
  eval echo "set ${field} \\\"\$${field}\\\"" >> ${pplfile}
 fi
done

# unquoted
for field in xrange yrange key; do
 #  if not empty, write it into the ppl file
 if [ ! -z "`eval echo \\$${field}`" ]; then
  eval echo "set ${field} \$${field}" >> ${pplfile}
 fi
done


if [ ! -z "$grid" ]; then
 echo "set grid" >> ${pplfile}
fi

# we translate points to dashes because pdflatex does not like points in filenames
escappedoutput=`echo $output | sed s/\\\\./-/g`
if [ ${pdf} -ne 0 ]; then
 cat << EOF >> ${pplfile}
set terminal pdf
set output "${escappedoutput}.pdf"
EOF
elif [ ${png} -eq 1 ]; then
 cat << EOF >> ${pplfile}
set terminal png dpi ${dpi}
set output "${escappedoutput}.png"
EOF
else
 echo "error: neither pdf or png output given"
 exit 1
fi

ncols=${#ycol[@]}

# if no ycol argument is given, sweep all the columns
if [ $ncols -eq 0 ]; then
 ncols=`grep -v \# $data | head -n1 | awk '{print NF}'`
 last=`expr ${ncols} - 2`
 for i in `seq 0 ${last}`; do
  ycol[$i]=`expr $i + 2`
 done
fi

# if not explicitly given, choose a suitable point interval
if [[ -z "${with[0]}" ]] && [[ -z "${pi[0]}" ]] ; then
#  x0=`grep -v \# $data | head -n1 | awk -v col=$xcol '{print $col}'`
#  xn=`grep -v \# $data | tail -n1 | awk -v col=$xcol '{print $col}'`
 n=`grep -v \# $data | wc -l`
 if [ $n -gt 10 ]; then
  last=`expr ${ncols} - 2`
  for i in `seq 0 ${last}`; do
   pi[$i]=`echo "scale=3; (0.5+${RANDOM}.0/32726.0)*($n/10.0)" | bc`
  done
 fi
fi

# if no titles given, check if the file contains a header with the column title
if [[ -z "${ti[0]}" ]] && [[ "`head -n1 $data | cut -c1`" == "#" ]]; then
 last=`expr ${ncols} - 2`
 for i in `seq 0 ${last}`; do
  ti[$i]=`head -n1 $data | cut -c1 --complement | awk -v col=${ycol[$i]} '{print $col}' | sed s/_/\\\\\\\\_/`
 done
 if [ -z "$xlabel" ]; then
  echo "set xlabel \"`head -n1 $data | cut -c1 --complement | awk -v col=${xcol} '{print $col}' | sed s/_/\\\\\\\\_/`\"" >> ${pplfile}
 fi
fi

echo "plot \\" >> ${pplfile}

i=0
while [ ! -z "${ycol[$i]}" ]; do

# extension to pyxplot: it doesn't handle w lp pi 10
 if [ -z "${pi[$i]}" ]; then
  echo -n "\"$data\" u $xcol:${ycol[$i]} "  >> ${pplfile}

  if [ -z "${with[$i]}" ]; then
   echo -n " w lp" >> ${pplfile};
  else
   echo -n " w ${with[$i]}" >> ${pplfile};
  fi

  if [ ! -z "${lw[$i]}" ];    then  echo -n " lw ${lw[$i]}"        >> ${pplfile}; fi
  if [ ! -z "${lt[$i]}" ];    then  echo -n " lt ${lt[$i]}"        >> ${pplfile}; fi

  if [ ! -z "${pt[$i]}" ]; then
    echo -n " pt ${pt[$i]}"               >> ${pplfile}
  elif [ ! -z "${defaultpt[$i]}" ]; then
    echo -n " pt ${defaultpt[$i]}"        >> ${pplfile}
  fi

  if [ ! -z "${plw[$i]}" ];   then  echo -n " plw ${plw[$i]}"      >> ${pplfile}; fi
  if [ ! -z "${ps[$i]}" ];    then  echo -n " ps ${ps[$i]}"        >> ${pplfile}; fi

  if [ ! -z "${color[$i]}" ]; then
    echo -n " color ${color[$i]}"         >> ${pplfile}
  elif [ ! -z "${defaultcolor[$i]}" ]; then
    echo -n " color ${defaultcolor[$i]}"  >> ${pplfile}
  fi

  if [ ! -z "${ti[$i]}" ];           then
   echo -n " ti \"${ti[$i]}\""             >> ${pplfile}
  else
   echo -n " ti \"\""                      >> ${pplfile}
  fi

 else
  echo -n "\"$data\" u $xcol:${ycol[$i]} every ${pi[$i]} w p"  >> ${pplfile}
  if [ ! -z "${lt[$i]}" ];    then  echo -n " lt ${lt[$i]}"        >> ${pplfile}; fi

  if [ ! -z "${pt[$i]}" ]; then
    echo -n " pt ${pt[$i]}"               >> ${pplfile}
  elif [ ! -z "${defaultpt[$i]}" ]; then
    echo -n " pt ${defaultpt[$i]}"        >> ${pplfile}
  fi

  if [ ! -z "${plw[$i]}" ];   then  echo -n " plw ${plw[$i]}"      >> ${pplfile}; fi
  if [ ! -z "${ps[$i]}" ];    then  echo -n " ps ${ps[$i]}"        >> ${pplfile}; fi
  if [ ! -z "${color[$i]}" ]; then
    echo -n " color ${color[$i]}"         >> ${pplfile}
  elif [ ! -z "${defaultcolor[$i]}" ]; then
    echo -n " color ${defaultcolor[$i]}"  >> ${pplfile}
  fi

  if [ ! -z "${ti[$i]}" ];    then
   echo -n " ti \"${ti[$i]}\""    >> ${pplfile}
  else
   echo -n " ti \"\""             >> ${pplfile}
  fi

  echo -n ", \"$data\" u $xcol:${ycol[$i]} w l "  >> ${pplfile}
  if [ ! -z "${lw[$i]}" ];    then  echo -n " lw ${lw[$i]}"        >> ${pplfile}; fi
  if [ ! -z "${lt[$i]}" ];    then  echo -n " lt ${lt[$i]}"        >> ${pplfile}; fi
  if [ ! -z "${color[$i]}" ]; then
    echo -n " color ${color[$i]}"         >> ${pplfile}
  elif [ ! -z "${defaultcolor[$i]}" ]; then
    echo -n " color ${defaultcolor[$i]}"  >> ${pplfile}
  fi
  echo -n " ti \"\""             >> ${pplfile}
 fi


 i=`echo $i + 1 | bc`
 if [ ! -z "${ycol[$i]}" ]; then
  echo ",\\" >> ${pplfile}
 fi
done

echo >> ${pplfile}

if [[ ${pdf} -ne 1 ]] && [[ ${png} -eq -1 ]]; then
 cat << EOF >> ${pplfile}
set terminal png dpi ${dpi}
set output "${escappedoutput}.png"
replot
EOF
fi

# call pyxplot
pyxplot ${pplfile}

if [ ! -z "$debug" ]; then
 echo "debug: plot file saved as ${pplfile}"
else
 rm ${pplfile}
fi
